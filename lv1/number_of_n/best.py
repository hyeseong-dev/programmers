def solution(x, n):
    answer = []
    current = x
    for _ in range(n):
        answer.append(current)
        current += x
    return answer



# 개선된 코드에서는 while 루프 대신 for 루프를 사용하여 구현했습니다. range(n)을 이용하여 n번 반복하도록 설정합니다. answer 리스트에 값을 추가하고, 
# current 변수를 사용하여 다음 값을 계산하며 x를 더해줍니다. 
# 이렇게 하면 len(answer)의 길이가 n이 될 때까지 반복하게 됩니다. 
# 이 코드의 시간 복잡도와 공간 복잡도는 기존 코드와 동일하게 O(n)입니다.


# 기존 코드와 개선된 코드 사이의 주요 차이점은 다음과 같습니다:

# 1. 반복 구조: 기존 코드는 `while` 루프를 사용하여 `len(answer)`가 `n`보다 작은 동안 반복합니다. 개선된 코드는 `for` 루프를 사용하여 `range(n)`을 통해 `n`번 반복합니다.
# 2. 변수 초기화: 기존 코드에서는 `answer` 리스트를 초기화하고, `x` 값을 `x` 변수에 저장합니다. 개선된 코드에서는 `answer` 리스트를 바로 생성하고, `current` 변수를 도입하여 현재 값으로 초기화합니다.
# 3. 요소 추가: 기존 코드에서는 `answer.append(x)`로 `x` 값을 리스트에 추가합니다. 개선된 코드에서는 `answer.append(current)`로 `current` 값을 추가합니다.
# 4. 값의 계산: 기존 코드에서는 `x += answer[0]`으로 다음 값을 계산합니다. 개선된 코드에서는 `current += x`로 다음 값을 계산합니다.

# 이러한 변경으로 인해 개선된 코드는 가독성이 좋아지고, 반복 구조가 명확해집니다. 또한 변수 초기화와 값의 계산이 더 직관적으로 이루어집니다. 하지만 기능적인 측면에서는 동일한 결과를 반환하는 코드입니다.