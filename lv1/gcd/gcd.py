def gcd(a, b):
    while b != 0:
        r = a % b
        a = b
        b = r
    return a

def solution(n, m):
    g = gcd(n, m)
    return [g, n*m//g]

solution(3, 12)


# 이 문제는 최대공약수와 최소공배수를 구하는 문제입니다. 최대공약수는 두 수의 공통된 약수 중에서 가장 큰 수를 의미하며, 최소공배수는 두 수의 공통된 배수 중에서 가장 작은 수를 의미합니다.

# 우선, 최대공약수를 구하는 가장 대표적인 방법인 유클리드 호제법을 사용하겠습니다. 그리고 최소공배수는 두 수의 곱을 그들의 최대공약수로 나눈 것이므로, 이를 활용하겠습니다.


# 여기서 gcd 함수는 유클리드 호제법으로 최대공약수를 구하는 함수입니다. solution 함수에서는 먼저 gcd 함수를 통해 최대공약수를 구하고, 이를 이용해 최소공배수를 구하여 반환합니다.

# 예를 들어, solution(3, 12)를 호출하면, gcd(3, 12)는 3을 반환하고, 그 다음으로 최소공배수인 3*12//3는 12를 반환하므로, [3, 12]를 반환합니다.

# 또한, solution(2, 5)를 호출하면, gcd(2, 5)는 1을 반환하고, 그 다음으로 최소공배수인 2*5//1는 10을 반환하므로, [1, 10]를 반환합니다.