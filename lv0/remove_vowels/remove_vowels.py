'''
 코드의 시간 복잡도와 공간 복잡도는 다음과 같습니다:

시간 복잡도: O(n). 여기서 n은 입력 문자열의 길이입니다. 
모든 문자를 순회하며 모음인지 아닌지를 판단하기 때문에 이 과정이 문자열의 길이에 비례하는 시간이 소요됩니다.

공간 복잡도: O(n). 새로운 문자열 'answer'이 생성되며 이 문자열은 원래 문자열의 모음을 제외한 문자들을 포함하므로, 
입력 문자열의 길이에 비례하는 공간이 필요합니다.

둘. 최적화하기 위해 파이썬의 리스트 컴프리헨션을 사용할 수 있습니다. best.py 모듈 참고!!
이렇게 하면 코드를 간결하게 만들 수 있습니다. 시간 복잡도는 이전과 동일하게 O(n)이며, 공간 복잡도 역시 O(n)으로 유지됩니다.

'''

def solution(my_string):
    answer = ''
    vowels = 'aeiou'
    for i in my_string:
        if i not in vowels:
            answer += i

    return answer