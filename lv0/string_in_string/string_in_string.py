def solution(str1, str2):
    answer = 0
    if str2 in str1:
        answer = 1
    else:
        answer = 2
    return answer

"""
시간 복잡도: 이 함수의 시간 복잡도는 O(n*m) 입니다. 여기서 n은 str1의 길이이며 m은 str2의 길이입니다. 이는 Python의 in 연산자가 최악의 경우 모든 위치에서 str2를 찾아야 하기 때문입니다.

공간 복잡도: 이 함수의 공간 복잡도는 O(1) 입니다. 이 함수는 입력 문자열 외에 추가적인 공간을 사용하지 않기 때문입니다.

이 함수를 더 최적화하려면 다양한 문자열 매칭 알고리즘을 사용할 수 있습니다. 하지만 Python의 in 연산자는 이미 매우 효율적으로 구현되어 있으므로, 대부분의 경우에는 이를 개선하는 것이 실질적인 성능 향상을 가져오지 않습니다. 따라서 이 함수는 이미 꽤 최적화되어 있다고 할 수 있습니다.
그러나 특정 상황에서는 보이어-무어(BM) 알고리즘 또는 Knuth-Morris-Pratt (KMP) 알고리즘이 더 빠르게 작동할 수 있습니다. 그러나 이러한 알고리즘들은 구현이 복잡하며, 일반적인 상황에서는 Python의 in 연산자에 비해 크게 빠르지 않습니다. 따라서 이러한 알고리즘을 사용하여 이 함수를 최적화하는 것은 일반적으로 추천하지 않습니다.
"""