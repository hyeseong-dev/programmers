def solution(n):
    n //= 2 
    return n * (n + 1)

'''
sum_of_even_number 모듈의 시간 복잡도는 O(n)입니다. 선형적으로 증가하조.
하지만 위의 코드는 O(1)의 시간 복잡도를 가집니다.

짝수의 합은 공식을 사용해서 구할 수 있습니다. 
2부터 n까지의 짝수의 합은 2를 공통으로 빼면 1부터 n/2까지의 합과 동일하며, 
이를 구하는 공식은 n*(n+1)/2입니다. 따라서, 짝수의 합을 구하는 공식은 n*(n+1)가 됩니다.


[짝수 합의 공식]
1부터 n까지의 자연수의 합 공식은 아래와 같습니다. 

1 + 2 + 3 + ... + n = n * (n + 1) / 2

등차수열의 합 공식에서 유래하며, 가우스(Gauss)가 어릴 때 발견한 유명한 공식입니다.
2부터 2n까지의 짝수의 합은 아래와 같이 표현할 수 있습니다:

2 + 4 + 6 + ... + 2n = 2 * (1 + 2 + 3 + ... + n) = 2 * (n * (n + 1) / 2) = n * (n + 1)


여기서 2 * (1 + 2 + 3 + ... + n)는 각 항에 2를 곱하여 짝수를 만드는 과정입니다. 
그런 다음, 전체 합에 2를 곱해줍니다. 
이 때, (1 + 2 + 3 + ... + n)는 원래의 자연수 합 공식이므로, 
이를 n * (n + 1) / 2로 대체할 수 있습니다. 
그래서 최종적으로 n * (n + 1)이라는 짝수의 합 공식을 얻게 됩니다.

따라서, 위의 Python 코드에서는 n을 2로 나눈 후(이는 n이 짝수일 때만 유효하므로, 
실제 구현에서는 n을 2로 나눈 몫을 사용합니다), 공식 n * (n + 1)을 사용하여 1부터 n까지의 짝수의 합을 구하고 있습니다.

'''
print(solution(11))