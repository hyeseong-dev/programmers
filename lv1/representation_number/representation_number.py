def solution(n):
    answer = 0 # 방법의 수를 저장할 변수
    start = 1 # 연속된 수의 시작 값을 저장할 변수
    end = 1 # 연속된 수의 끝 값을 저장할 변수
    sum = 1 # 연속된 수의 합을 저장할 변수

    while start <= n//2 + 1: # 시작값이 n의 절반을 넘지 않는 범위 내에서 반복

        if sum < n: # 연속된 수의 합이 n보다 작은 경우
            end += 1 # 끝 값을 1 증가시킴
            sum += end # 증가된 끝 값을 합에 더함

        elif sum == n: # 연속된 수의 합이 n과 같은 경우
            answer += 1 # 방법의 수 1 증가
            end += 1 # 끝 값을 1 증가시킴
            sum += end # 증가된 끝 값을 합에 더함 
            
        else : # 연속된 수의 합이 n보다 큰 경우
            sum -= start # 시작값을 합에서 뺌
            start += 1 # 시작 값을 1 증가시킴

    return answer + 1 # 자기 자신을 더함 (n이 자연수 자신으로 표현되는 경우를 포함)


solution(15)


# start <= n//2 + 1는 연속된 자연수를 더하는 과정에서 start 값이 너무 커지면 n을 초과할 수 있으므로, 이를 방지하기 위한 조건입니다.
# 자연수 n을 연속된 자연수들로 표현하는 경우, 가장 작은 수인 start가 n의 절반을 넘어가는 순간 n을 초과하게 됩니다. 
# 
# 예를 들어, n이 10이라고 하면, 6+7은 이미 10을 초과하기 때문에 start는 최대 5까지만 가능합니다.

# 그러나 n이 홀수인 경우, n//2 + 1까지 가능합니다. 
# 예를 들어, n이 9인 경우, 4+5 = 9로 표현이 가능하기 때문입니다.
# 따라서 start <= n//2 + 1 조건은 start가 증가하는 것을 n//2 + 1 까지만 허용하는 것으로, 연속된 자연수들의 합이 n을 초과하는 것을 방지하기 위한 조건입니다.

# 자연수 n을 연속된 자연수의 합으로 표현하는 방법을 찾는 문제에서, 연속된 자연수의 시작 지점을 'start'라고 합시다.
# 예를 들어, n이 15인 경우를 생각해 봅시다.

# 연속된 숫자를 1부터 시작해서 더한다면, 1 + 2 + 3 + 4 + 5 = 15로 n을 표현할 수 있습니다. 여기서 start는 1입니다.
# start가 2, 3, 4, 또는 5라면, 그런 연속된 숫자의 합으로 15를 만드는 것도 가능합니다.
# 하지만, start가 6 이상이라면 연속된 자연수의 합으로 15를 만드는 것은 불가능합니다. 왜냐하면, 최소한 6 + 7 + 8 = 21로 이미 15를 초과하기 때문입니다.
# 따라서, 어떤 수 n을 연속된 자연수의 합으로 표현할 때, 시작 지점인 start는 최대 n//2 + 1까지만 고려하면 됩니다. 그 이상은 고려하지 않아도 되는 것이죠.

# 이 조건은 n이 홀수인 경우에도 성립합니다. 예를 들어 n이 9라고 하면, start는 최대 5까지 가능합니다. 4 + 5 = 9이지만, start가 6이상이면 9를 초과하게 되므로 연속된 자연수의 합으로 9를 만드는 것은 불가능합니다.
# 이러한 이유로 start <= n//2 + 1 이라는 조건이 필요한 것입니다.



# ----
# 자연수 n을 연속된 자연수의 합으로 표현하려는 문제에서 가장 중요한 것은 시작 수(start)와 끝 수(end)가 어디까지 가능한지를 파악하는 것입니다.

# 연속된 수의 시작 수가 n의 절반을 넘어가면 연속된 수로 n을 표현하는 것이 불가능합니다. 그 이유는 무엇일까요?

# 예를 들어, n이 20이라고 가정합시다. 이때 시작 수를 11부터 시작하면 연속된 수의 합은 11+12 = 23으로 이미 n을 초과했습니다. 따라서 시작 수가 n의 절반을 넘어가는 것은 무의미합니다.

# 그런데 만약 n이 홀수인 경우는 어떨까요? n이 홀수라면 n의 절반은 소수점이 있어서 정확히 반으로 나눠지지 않습니다. 그렇기 때문에 n//2 + 1까지 가능합니다.

# 예를 들어, n이 21이라고 가정합시다. 이때 시작 수를 11로 설정하면 연속된 수의 합은 11+10=21로 n을 표현할 수 있습니다. 그러나 시작 수를 12로 설정하면 12+11=23으로 n을 초과합니다. 따라서 시작 수는 n//2 + 1 까지 가능하다는 것이죠.

# 이런 이유로 while 문의 조건이 start <= n//2 + 1인 것입니다. 이 조건은 시작 수를 n의 절반보다 하나 더 큰 수까지만 고려하면 된다는 것을 의미합니다.
