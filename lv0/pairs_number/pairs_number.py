def solution(n):
    answer = 1
    divisor = 1
    while divisor < n:
        if 0 == n % divisor:
            answer += 1    
        divisor += 1
    return answer

"""
주어진 코드의 시간 복잡도는 O(N)이며, 공간 복잡도는 O(1)입니다. 여기서 N은 입력값 n의 크기입니다.

주어진 코드를 개선하기 위해서는 약수의 개수를 세는 방법을 최적화해야 합니다. 현재 코드에서는 1부터 n까지 모든 수에 대해 나눗셈 연산을 수행하여 약수를 찾고 있습니다. 이는 비효율적인 방법입니다.

약수의 특징을 이용하여 개선된 코드를 작성할 수 있습니다. 약수는 항상 짝을 이루기 때문에, n의 제곱근까지만 반복하여 약수를 찾으면 됩니다. 제곱근 이후의 수는 이미 앞에서 찾은 약수에 대응되기 때문에 반복할 필요가 없습니다.
"""